/**
 * @typedef {import("@11ty/eleventy").UserConfig} UserConfig
 */

const { tmpdir } = require("node:os")
const { env } = require("node:process")
const esbuild = require("esbuild")
const htmlMinifier = require("html-minifier-terser")
const lightningcss = require("lightningcss")
const { extname } = require("node:path")
const { CodeExample } = require("./src/blocks/code-example/code-example.js")

/**
 * @param {UserConfig} c
 * @returns {UserConfig}
 */
function config(c) {
  c.addPassthroughCopy({ "src/blocks/fonts/static/*.{woff,woff2}": "." })

  if (env.ELEVENTY_RUN_MODE === "build") {
    configureMarkup(c)
  }

  configureStyles(c, ["./src/blocks/main.css"])
  configureScripts(c, ["./src/blocks/main.js"])

  configureProducts(c)

  c.addPairedShortcode("CodeExample", CodeExample)

  return {
    // templateFormats: ["njk", "11ty.js", "md"],
    dir: {
      data: "_",
      includes: "",
      input: "src",
      output: "site"
    },
    htmlTemplateEngine: "njk",
    markdownTemplateEngine: "njk"
  }
}

/**
 * @param {UserConfig} c
 */
function configureMarkup(c) {
  c.addTransform("minify-html", function (content) {
    if (this.outputPath === false) {
      return
    }
    if (!this.outputPath.endsWith(".html")) {
      return content
    }
    return htmlMinifier.minify(content, {
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      decodeEntities: true,
      includeAutoGeneratedTags: false,
      removeAttributeQuotes: true,
      removeComments: true,
      removeEmptyAttributes: true,
      removeRedundantAttributes: true,
      sortAttributes: true
    })
  })
}

/**
 * @param {UserConfig} c
 * @param {string[]} l
 */
function configureStyles(c, l) {
  c.addTemplateFormats("css")
  c.addExtension("css", {
    outputFileExtension: "css",
    compile(_, p) {
      if (!l.includes(p)) {
        return
      }
      return async () => {
        const { code } = await lightningcss.bundleAsync({
          filename: p,
          // minify: true
          // todo: separate to use env
          minify: false
          // targets: lightningcss.browserslistToTargets()
        })
        return code
      }
    }
  })
}

/**
 * @param {UserConfig} c
 * @param {string[]} l
 */
function configureScripts(c, l) {
  c.addTemplateFormats("js")
  c.addExtension("js", {
    outputFileExtension: "js",
    compile(_, p) {
      if (!l.includes(p)) {
        return
      }
      return async () => {
        const r = await esbuild.build({
          bundle: true,
          entryPoints: [p],
          // minify: true,
          // todo: separate to use env
          minify: false,
          outdir: tmpdir(),
          write: false
        })
        const f = r.outputFiles[0]
        return f.text
      }
    }
  })
}

/**
 * @param {UserConfig} c
 */
function configureProducts(c) {
  c.addCollection("products", (c) => {
    // todo: rewrite it.

    const r = {}

    const l = c.getFilteredByTag("product")
    l.forEach((i) => {
      const e = extname(i.outputPath)
      if (e !== ".html") {
        return
      }

      const m = i.url.match(/^\/([\S\s]*)\/$/)
      if (!m) {
        return
      }

      const [, u] = m
      if (!u) {
        return
      }

      const us = u.split("/")
      let t = r
      us.forEach((s, index) => {
        if (t[s] === undefined) {
          t[s] = {
            internal: {},
            children: {}
          }
        }

        switch (index) {
          case us.length - 1:
            t[s].internal = i
            if (t[s].internal.data.order === undefined) {
              t[s].internal.data.order = 0
            }
            break
          default:
            t = t[s].children
            break
        }
      })
    })

    function resolve(i) {
      let children = []
      if (i.children !== undefined) {
        children = Object.values(i.children).map(resolve)
      }
      return {
        internal: i.internal,
        children
      }
    }

    const g = Object.values(r).map(resolve)

    function sortTrue(t) {
      for (let i = 0; i < t.length - 1; i += 1) {
        for (let j = 0; j < t.length - i - 1; j += 1) {
          if (t[j].internal.data.order === t[j + 1].internal.data.order) {
            if (t[j].internal.url > t[j + 1].internal.url) {
              let temp = t[j];
              t[j] = t[j + 1];
              t[j + 1] = temp;
            }
            continue
          }
          if (t[j].internal.data.order > t[j + 1].internal.data.order) {
            let temp = t[j];
            t[j] = t[j + 1];
            t[j + 1] = temp;
          }
        }
      }
      return t
    }

    function sort(t) {
      return sortTrue(Object.values(t)).map((i) => {
        let c = []
        if (i.children !== undefined) {
          c = sort(i.children)
        }
        return {
          internal: i.internal,
          children: c
        }
      })
    }

    return sort(g)
  })
}

module.exports = config
